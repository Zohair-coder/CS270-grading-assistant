(define (insert_multiple_bindings bindings table)
  (cond
    [(null? table) bindings]
    [(null? bindings) null ]
    
    ;[else (append (insert_binding (first bindings) table) (insert_multiple_bindings (rest bindings) table))]
    ;[else (map (λ (x) insert_binding x table) (insert_multiple_bindings bindings (rest table)))]
    ;[else (map (λ (x) append x) table)]
    ;[else (append (map (λ (x) insert_binding x table) (insert_multiple_bindings bindings (rest table))))]
    
    ;[else (map (λ (x) (insert_binding (first bindings) table)) (insert_multiple_bindings (rest bindings) table))]
    ;[else (append (map (λ (x) insert_binding x table) (insert_multiple_bindings (rest bindings) (rest table))))]
    ;[else (map (λ (x) insert_binding bindings x) (insert_multiple_bindings bindings (rest table)))])
    ;[else (map (λ (x) insert_binding x table) (rest table))]
    ;[else (map (λ (x) bindings) table)]

    
    ;[else (insert_binding (first bindings) table) (insert_multiple_bindings (rest bindings) table)]
    ;[else (map (λ (x) (first bindings)) (first table)) (insert_multiple_bindings bindings (rest table))]
    [else (append (insert_binding (first (first bindings)) table) (insert_multiple_bindings (rest bindings) table))]
    
    ))

  ;insert binding and mult
  

