(define (bool-eval expression environment)
  (cond
    [(is-constant? expression) (eval-constant expression environment)] ;Case 1 Constants
    [(is-variable? expression) (eval-variable expression environment)] ;Case 2 Variables
    [(is-or? expression) (eval-or expression environment)]             ;Case 3 or statements

    ;spacing for organization

    ;should be eval-____, expression environment for each case
    ;Case 4 implement not statements
    [(is-not? expression) (eval-not expression environment)]


    ;should be eval-____, expression environment for each case
    ;Case 5 implement and statements
    [(is-and? expression)(eval-and expression environment)]

    
    ;should be eval-____, expression environment for each case
    ;Case 6 implement implies statements
    [(is-implies? expression)(eval-implies expression environment)]


    ;should be eval-____, expression environment for each case
    ;Case 7 implement iff statements
    [(is-iff? expression)(eval-iff expression environment)]
    [else null])) ; note that this else case should never be hit because of the input contract

