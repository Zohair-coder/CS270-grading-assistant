(define (make-truth-table var_names)
  ;(foldl (lambda (x y) (extend_table y x)) '() var_names))
0)
  (define-test-suite make-truth-table-suite
(check-equal? (make-truth-table '(a)) '( ((a #t)) ((a #f))))
(check-equal? (make-truth-table '(a b))
;Result with pretty spacing
;( 
;      ( ( a #t) ( b #t))
;      ( ( a #t) ( b #f))
;      ( ( a #f) ( b #t))
;      ( ( a #f) ( b #f))
;)
'( ((a #t) (b #t)) ((a #t) (b #f)) ((a #f) (b #t)) ((a #f) (b #f)))
);end of check

;This answer is very long (2^4 possibilities)
(check-equal? 
(make-truth-table '(a b c d)) 
'(  ((a #t) (b #t) (c #t) (d #t))
    ((a #t) (b #t) (c #t) (d #f))
    ((a #t) (b #t) (c #f) (d #t))
    ((a #t) (b #t) (c #f) (d #f))
    ((a #t) (b #f) (c #t) (d #t))
    ((a #t) (b #f) (c #t) (d #f))
    ((a #t) (b #f) (c #f) (d #t))
    ((a #t) (b #f) (c #f) (d #f))

    ((a #f) (b #t) (c #t) (d #t))
    ((a #f) (b #t) (c #t) (d #f))
    ((a #f) (b #t) (c #f) (d #t))
    ((a #f) (b #t) (c #f) (d #f))
    ((a #f) (b #f) (c #t) (d #t))
    ((a #f) (b #f) (c #t) (d #f))
    ((a #f) (b #f) (c #f) (d #t))
    ((a #f) (b #f) (c #f) (d #f)))))
(run-tests make-truth-table-suite 'verbose)
#|
 Part 5: is_satisfied

 Given a boolean expression, decide if it is satisfied (true for atleast
                             one assignment of the variables)

 Input: A boolean expression with variables
 Output: True if the expression is satisfied, false otherwise
 Given an expression and a truth table
 Run the expression on each item and make a list of the results
|#

; Question 12: run-on-truth-table
(define (run-on-truth-table expression tt)
  0);Implement Me

