(define (createInitialList expression)(cond
    [(null? expression) null]
    [(not (list? expression)) (list expression)]
    [(is-not? expression) (createInitialList (second expression))]
    [else (append (createInitialList (second expression)) (createInitialList (third expression)))]
  ))

(define (isDuplicate? item list)
  (cond
    [(null? list) #f]
    [(equal? (first list) item) #t]
    [else (isDuplicate? item (rest list))]
  ))

(define (tidyList list)
  (cond
    [(null? list) null]
    [(not (or
           (or (equal? (first list) #t) (equal? (first list) #f))
           (isDuplicate? (first list) (rest list))))
        (cons (first list) (tidyList (rest list)))]
    [else (tidyList (rest list))]
  ))

(define (get-variables expression)
  (tidyList (createInitialList expression)))

