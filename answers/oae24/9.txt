(define (insert_multiple_bindings bindings table)
  (cond
    [(null? table) bindings]
    [(null? bindings) null]
    [else (append (map (λ (x) (append (first bindings) x)) table) (map (λ (x) (append (second bindings) x)) table)) ]))

;end  

(define-test-suite insert-multiple-bindings-suite
(check-equal?  (insert_multiple_bindings '( ((a #t)) ((a #f))) '())  '( ((a #t)) ((a #f))))
(check-equal?  (insert_multiple_bindings '() '( ((b #t)) ((b #f)))) '())
(check-equal? (insert_multiple_bindings '( ((a #t)) ((a #f))) '( ((b #t)) ((b #f))) )
'(((a #t) (b #t)) ; newlines inserted here just to help the visualization
  ((a #t) (b #f))
  ((a #f) (b #t))
  ((a #f) (b #f)))))
(run-tests insert-multiple-bindings-suite 'verbose)

;Extend Table
;Given a table of truth values, extend it by adding a new variable name.
;(extend_table var_name current_table)
;Use the functions you have previously defined.

; Question 10: extend_table
(define (extend_table var_name current_table)
  (insert_multiple_bindings (make_bindings var_name) current_table))

